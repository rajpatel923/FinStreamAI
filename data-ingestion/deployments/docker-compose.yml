version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - finstreami-network

  # Kafka Broker 1
  kafka-1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka-1
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: 'snappy'
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - finstreami-network

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-1:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - finstreami-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka-1
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:19092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - finstreami-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - finstreami-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - finstreami-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - finstreami-network

  # Market Data Producer
  market-producer:
    build:
      context: .
      dockerfile: deployments/Dockerfile
      target: market-producer
    container_name: market-producer
    depends_on:
      - kafka-1
      - schema-registry
    environment:
      - KAFKA_BROKERS=kafka-1:19092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - MARKET_WS_URL=${MARKET_WS_URL}
      - MARKET_API_KEY=${MARKET_API_KEY}
      - LOG_LEVEL=info
    ports:
      - "9090:9090"
    networks:
      - finstreami-network
    restart: unless-stopped

  # News Producer
  news-producer:
    build:
      context: .
      dockerfile: deployments/Dockerfile
      target: news-producer
    container_name: news-producer
    depends_on:
      - kafka-1
      - schema-registry
    environment:
      - KAFKA_BROKERS=kafka-1:19092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - NEWS_API_KEY=${NEWS_API_KEY}
      - LOG_LEVEL=info
    ports:
      - "9091:9091"
    networks:
      - finstreami-network
    restart: unless-stopped

  # Social Media Producer
  social-producer:
    build:
      context: .
      dockerfile: deployments/Dockerfile
      target: social-producer
    container_name: social-producer
    depends_on:
      - kafka-1
      - schema-registry
    environment:
      - KAFKA_BROKERS=kafka-1:19092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - REDDIT_API_KEY=${REDDIT_API_KEY}
      - LOG_LEVEL=info
    ports:
      - "9092:9092"
    networks:
      - finstreami-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-1-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  finstreami-network:
    driver: bridge